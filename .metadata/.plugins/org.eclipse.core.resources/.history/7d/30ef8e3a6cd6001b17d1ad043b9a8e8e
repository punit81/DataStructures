package BinarySearchTree;

import BinaryNode.BNode;

public class BST{
	private BNode node;
	public BST() {
		this.node=null;
	}
	public void insert(int data) {
		this.insert1(data, this.node);
	}
	private void insert1(int data,BNode node) {
		if(node==null) {
			BNode node1=new BNode(data);
			node=node1;
			return;
		}
		if((int)node.getData()<=data) {
			insert1(data,node.getRight());
		}
		else
			insert1(data,node.getLeft());
	}
	public void inOrder() {
		this.inOrder1(this.node);
	}
	private void inOrder1(BNode node) {
		if(node==null) {
			return;
		}
		System.out.println((int)this.node.getData());
		inOrder1(node.getLeft());
		inOrder1(node.getRight());
	}
	public void preOrder() {
		this.preOrder1(this.node);
	}
	private void preOrder1(BNode node) {
		if(node==null) {
			return;
		}
		preOrder1(node.getLeft());
		System.out.println((int)this.node.getData());
		preOrder1(node.getRight());
	}
	public void postOrder() {
		this.postOrder1(this.node);
	}
	private void postOrder1(BNode node) {
		if(node==null) {
			return;
		}
		postOrder1(node.getLeft());
		postOrder1(node.getRight());
		System.out.println((int)this.node.getData());
	}
}